#3 build types 
# - gcc under Ubuntu
# - clang under Ubuntu
# - visual studio under Windows
#
# Builds are set to use 2 threads per type
name: vmangos CI build

on:
  push:
    paths-ignore:
      - 'sql/**'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      #matrix declaration
      matrix:
        os: [ubuntu-latest]
        compiler: [gcc, clang]
        include:
          - os: windows-latest

    steps:

    #git checkout
    - uses: actions/checkout@v2

    #before install dependencies
    - name: ubuntu dependencies
      #ubuntu dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get -qq install libmysql++-dev libace-dev libtbb-dev
        sudo apt-get -qq install cmake build-essential cppcheck git make libiberty-dev openssl libssl-dev
      #windows dependencies
    - name: windows dependencies
      if: matrix.os == 'windows-latest'
      #Sets versions for ACE/TBB
      env:
        ACE_VERSION: 6.5.11
        ACE_VERSION2: 6_5_11
        TBB_VERSION: 2020.3
      
      run: |
        #directory variables
        export ACE_ROOT=$GITHUB_WORKSPACE/ACE_wrappers
        export TBB_ROOT_DIR=$GITHUB_WORKSPACE/tbb
        #wget
        choco install -y wget
        #ACE package download
        wget http://github.com/DOCGroup/ACE_TAO/releases/download/ACE%2BTAO-$ACE_VERSION2/ACE-$ACE_VERSION.zip
        unzip ACE-$ACE_VERSION.zip
        rm ACE-$ACE_VERSION.zip
        #configuration of ACE header
        echo "#include \"ace/config-win32.h\"" >> $ACE_ROOT/ace/config.h
        #TBB package download
        wget https://github.com/oneapi-src/oneTBB/releases/download/v$TBB_VERSION/tbb-$TBB_VERSION-win.zip
        unzip tbb-$TBB_VERSION-win.zip
        rm tbb-$TBB_VERSION-win.zip
        #make
        choco install -y make
        #cmake
        choco install -y cmake
        #openssl
        choco install -y openssl
      #git bash shell
      shell: bash

    #build and install
    #ubuntu
    - name: ubuntu build & install
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir build
        mkdir _install
        cd build
        cmake ../ -DCMAKE_INSTALL_PREFIX=../_install -DWITH_WARNINGS=0 -DUSE_EXTRACTORS=1
        make -j2
        make install
    #windows 
    - name: windows build & install
      if: matrix.os == 'windows-latest'
      run: |
        #directory variables
        export ACE_ROOT=$GITHUB_WORKSPACE/ACE_wrappers
        cd $GITHUB_WORKSPACE/ACE_wrappers
        /c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2019/Enterprise/MSBuild/Current/Bin/MSBuild.exe "ACE_wrappers_vs2019.sln" //p:Configuration=Release //p:Platform=x64 //t:ACE //m:2
        cd $GITHUB_WORKSPACE
        mkdir build
        cd build
        cmake -D TBB_ROOT_DIR=$GITHUB_WORKSPACE/tbb -DWITH_WARNINGS=0 -DUSE_EXTRACTORS=1 -G "Visual Studio 16 2019" -A x64 ..
        /c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio/2019/Enterprise/MSBuild/Current/Bin/MSBuild.exe "MaNGOS.sln" //p:Platform=x64 //p:Configuration=Release //m:2
      #git bash shell
      shell: bash
    - name: Create Upload File Name
      run: |
          echo "ARCHIVE_FILENAME=${{ github.event.repository.name }}-$(git rev-parse --short HEAD).zip" >> $env:GITHUB_ENV
    - name: Archive files
      if: matrix.os == 'windows-latest'
      run: |
          #data is in Release folder
          cd ${{github.workspace}}/bin
          copy ${{github.workspace}}/tbb/bin/intel64/vc14/tbb.dll ${{github.workspace}}/bin/Release/tbb.dll
          copy ${{github.workspace}}/tbb/bin/intel64/vc14/tbb_debug.dll ${{github.workspace}}/bin/Release/tbb_debug.dll
          copy ${{github.workspace}}/tbb/bin/intel64/vc14/tbb_preview.dll ${{github.workspace}}/bin/Release/tbb_preview.dll
          copy ${{github.workspace}}/tbb/bin/intel64/vc14/tbb_preview_debug.dll ${{github.workspace}}/bin/Release/tbb_preview_debug.dll
          copy ${{github.workspace}}/tbb/bin/intel64/vc14/tbbmalloc.dll ${{github.workspace}}/bin/Release/tbbmalloc.dll
          copy ${{github.workspace}}/tbb/bin/intel64/vc14/tbbmalloc_debug.dll ${{github.workspace}}/bin/Release/tbbmalloc_debug.dll
          copy ${{github.workspace}}/tbb/bin/intel64/vc14/tbbmalloc_proxy.dll ${{github.workspace}}/bin/Release/tbbmalloc_proxy.dll
          copy ${{github.workspace}}/tbb/bin/intel64/vc14/tbbmalloc_proxy_debug.dll ${{github.workspace}}/bin/Release/tbbmalloc_proxy_debug.dll

          copy ${{github.workspace}}/ACE_wrappers/lib/ACE.dll ${{github.workspace}}/bin/Release/ACE.dll
          copy c:/mysql/lib/libmysql.dll ${{github.workspace}}/bin/Release/libmysql.dll
          copy "c:/Program Files/OpenSSL-Win64/bin/libssl-1_1-x64.dll" ${{github.workspace}}/bin/Release/libssl-1_1-x64.dll
          copy "c:/Program Files/OpenSSL-Win64/bin/libcrypto-1_1-x64.dll" ${{github.workspace}}/bin/Release/libcrypto-1_1-x64.dll

          7z a -tzip ${{env.ARCHIVE_FILENAME}} Release
    - name: Archive this artefact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
          name: snapshot-devbuild
          path: "${{github.workspace}}/bin/${{env.ARCHIVE_FILENAME}}"

    - name: Download artifact snapshot-Release
      if: matrix.os == 'windows-latest'
      uses: actions/download-artifact@v1
      with:
        name: snapshot-devbuild
        path: all_snapshots

    - name: Get current date
      if: matrix.os == 'windows-latest'
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

    - name: Upload snapshot
      if: matrix.os == 'windows-latest'
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: "Development Build(${{ steps.date.outputs.date }})"
        files: all_snapshots
